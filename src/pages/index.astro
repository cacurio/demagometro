---
import { AlertTriangle, CheckCircle, TrendingUp } from "lucide-react";
import DashboardCard from "../components/DashboardCard.astro";
import Layout from "../layouts/Layout.astro";

// Importaciones y datos
const areaData = [
  {
    candidateId: "1",
    critical_issues_analysis: {
      security: {
        display_name: "Seguridad",
        main_proposals: [
          "Fortalecimiento de fuerzas del orden",
          "Control fronterizo",
          "Reforma penitenciaria",
        ],
        demagoguery_level: {
          score: 3,
          scale: "0-5",
          category: "Moderado",
        },
        analysis: {
          strengths: [
            "Reconoce la crisis de seguridad",
            "Se enfoca en áreas clave de preocupación",
          ],
          weaknesses: [
            "Propuestas genéricas",
            "Culpa al poder legislativo sin autocrítica",
            "Falta detalle en financiamiento de reformas",
          ],
        },
      },
      economy: {
        display_name: "Economía",
        main_proposals: [
          "Diversificación productiva",
          "Atracción de inversiones",
          "Fomento de exportaciones",
        ],
        demagoguery_level: {
          score: 2,
          scale: "0-5",
          category: "Moderado-Bajo",
        },
        analysis: {
          strengths: [
            "Propuestas relativamente realistas",
            "Metas alcanzables",
          ],
          weaknesses: ["Falta especificidad en mecanismos de financiamiento"],
        },
      },
      education: {
        display_name: "Educación",
        main_proposals: [
          "Acceso universal",
          "Reducción deserción",
          "Becas",
          "Educación técnica",
        ],
        demagoguery_level: {
          score: 4,
          scale: "0-5",
          category: "Alto",
        },
        analysis: {
          weaknesses: [
            "Promete cobertura universal sin fuentes de financiamiento",
            "Simplifica excesivamente el problema de deserción",
            "Falta presupuesto específico para infraestructura",
          ],
          strengths: [],
        },
      },
      healthcare: {
        display_name: "Salud",
        main_proposals: [
          "Acceso universal",
          "Mejora infraestructura",
          "Atención primaria",
        ],
        demagoguery_level: {
          score: 4,
          scale: "0-5",
          category: "Alto",
        },
        analysis: {
          weaknesses: [
            "Promete cobertura universal sin plan financiero",
            "No aborda realísticamente la crisis del IESS",
            "Simplifica problemas estructurales del sistema de salud",
          ],
          strengths: [],
        },
      },
      institutions: {
        display_name: "Instituciones",
        main_proposals: [
          "Transparencia",
          "Modernización institucional",
          "Gobierno digital",
        ],
        demagoguery_level: {
          score: 3,
          scale: "0-5",
          category: "Moderado",
        },
        analysis: {
          weaknesses: [
            "Propuestas generalistas",
            "Culpa a la oposición sin autocrítica",
            "Falta detalle en implementación",
          ],
          strengths: [],
        },
      },
      environment: {
        display_name: "Ambiente y Energía",
        main_proposals: [
          "Transición energética",
          "Conservación",
          "Ciudades sostenibles",
        ],
        demagoguery_level: {
          score: 2,
          scale: "0-5",
          category: "Moderado-Bajo",
        },
        analysis: {
          strengths: ["Propuestas relativamente realistas"],
          weaknesses: [
            "Algunas metas ambientales carecen de financiamiento específico",
          ],
        },
      },
      social_development: {
        display_name: "Desarrollo Social",
        main_proposals: ["Reducción pobreza", "Protección social", "Vivienda"],
        demagoguery_level: {
          score: 4,
          scale: "0-5",
          category: "Alto",
        },
        analysis: {
          weaknesses: [
            "Promete reducción dramática de pobreza sin mecanismos claros",
            "Simplifica causas estructurales",
            "Falta sustentabilidad financiera en programas sociales",
          ],
          strengths: [],
        },
      },
      agriculture: {
        display_name: "Agricultura",
        main_proposals: ["Innovación agropecuaria", "Crédito", "Riego"],
        demagoguery_level: {
          score: 2,
          scale: "0-5",
          category: "Moderado-Bajo",
        },
        analysis: {
          strengths: ["Propuestas más específicas y realistas"],
          weaknesses: ["Algunos programas carecen de presupuesto detallado"],
        },
      },
    },
    general_assessment: {
      display_name: "General",
      main_concerns: [
        "Soluciones integrales sin detalles de implementación",
        "Subestimación de restricciones presupuestarias",
        "Culpa a la oposición sin autocrítica",
        "Simplificación de problemas estructurales",
      ],
      critical_areas: {
        highest_demagoguery: ["Educación", "Salud", "Desarrollo Social"],
        most_realistic: [
          "Economía y Empleo",
          "Agricultura y Desarrollo Rural",
          "Ambiente y Energía",
        ],
      },
    },
  },
];
// const candidate = areaData
//   .filter((area) => area.candidateId === "1")
//   .findLast((area) => area.critical_issues_analysis);
const result = Object.entries(areaData[0].critical_issues_analysis).map(
  ([area, data]) => ({
    area,
    data,
  })
);
const termo = {
  Alto: "bg-red-500",
  Moderado: "bg-yellow-500",
  "Moderado-Bajo": "bg-green-500",
  "Alto-Bajo": "bg-gray-500",
};
const maxDemagoguery = 4;
---

<Layout title="Análisis de Demagogia">
  <main class="p-6 max-w-7xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">
      Análisis de Demagógia en las propuesta presidenciales
    </h1>

    <!-- Tabs-->
    <div class="mb-6">
      <div class="inline-flex rounded-lg bg-gray-100 p-1">
        <button
          class="px-4 py-2 rounded-lg text-gray-600 tab-btn"
          data-tab="general">
            Vista General
        </button
        >
        <button 
          class="px-4 py-2 rounded-lg text-gray-600 tab-btn" 
          data-tab="details">
            Detalles
        </button
        >
      </div>
    </div>

    <!--vista general -->
    <div id="general" class="grid grid-cols-4 grid-row-2 tab-content">
      <!-- Cards Grid -->
      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8 col-span-4"
      >
        <!-- Nivel Promedio Card -->
        <DashboardCard>
          <div>
            <h3 class="text-sm text-gray-600 mb-2">
              Nivel Promedio de Demagogia
            </h3>
            <div class="flex items-baseline">
              <span class="text-3xl font-bold">3.4</span>
              <span class="text-xl text-gray-600">/5.0</span>
            </div>
            <p class="text-sm text-gray-500 mt-2">
              Basado en el análisis de n áreas
            </p>
            <div
              class="w-full h-2 bg-gray-200 rounded-full mt-3 overflow-hidden"
            >
              <div
                class="h-full bg-gradient-to-r from-green-400 via-yellow-400 to-red-500 w-[68%]"
              >
              </div>
            </div>
          </div>
        </DashboardCard>

        <!-- Áreas más Demagógicas -->
        <DashboardCard>
          <div>
            <div class="flex items-center gap-2 mb-3">
              <h3 class="text-sm text-gray-600">Áreas más Demagógicas</h3>
              <AlertTriangle className="w-4 h-4 text-red-500" />
            </div>
            <div class="space-y-2">
              {
                result.map((area) =>
                  area.data.demagoguery_level.score === maxDemagoguery ? (
                    <span class="inline-block px-3 py-1 rounded-full bg-red-100 text-red-700 text-sm">
                      {area.data.display_name}
                    </span>
                  ) : null
                )
              }
            </div>
          </div>
        </DashboardCard>

        <!-- Áreas más Realistas -->
        <DashboardCard>
          <div>
            <div class="flex items-center gap-2 mb-3">
              <h3 class="text-sm text-gray-600">Áreas más Realistas</h3>
              <CheckCircle className="w-4 h-4 text-green-500" />
            </div>
            <div class="space-y-2">
              {
                result.map((area) =>
                  area.data.demagoguery_level.score < maxDemagoguery ? (
                    <div class="px-3 py-1 rounded-lg bg-gray-100 text-sm">
                      {area.data.display_name}
                    </div>
                  ) : null
                )
              }
            </div>
          </div>
        </DashboardCard>

        <!-- Tendencia -->
        <DashboardCard>
          <div>
            <div class="flex items-center gap-2 mb-3">
              <h3 class="text-sm text-gray-600">Tendencia</h3>
              <TrendingUp className="w-4 h-4 text-blue-500" />
            </div>
            <div class="text-3xl font-bold">+2.1%</div>
            <p class="text-sm text-gray-500 mt-2">
              Comparado con el promedio histórico
            </p>
          </div>
        </DashboardCard>
      </div>

      <!-- Niveles de Demagogia por Área -->
      <div class="grid grid-cols-1 gap-6 col-span-4 lg:col-span-2">
        <div class="bg-white p-6 rounded-xl shadow-sm">
          <h3 class="text-lg font-semibold mb-6 flex items-center gap-2">
            <span>Niveles de Demagogia por Área</span>
          </h3>
          <div class="space-y-4">
            {
              result.map((area) => (
                <div class="flex items-center justify-between">
                  <div>
                    <div class="font-medium">{area.data.display_name}</div>
                    <div class="text-sm text-gray-500">
                      {area.data.demagoguery_level.category}
                    </div>
                  </div>
                  <div class="flex items-center gap-4">
                    <div class="w-48 h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div
                        class={`h-full ${
                          area.data.demagoguery_level.category === "Alto"
                            ? "bg-red-500"
                            : area.data.demagoguery_level.category ===
                                "Moderado"
                              ? "bg-orange-500"
                              : "bg-yellow-500"
                        }`}
                        style={`width: ${area.data.demagoguery_level.score * 20}%`}
                      />
                    </div>
                    <span class="text-sm font-medium w-8">
                      {area.data.demagoguery_level.score}
                    </span>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <!-- Alertas Principales -->
      <div class="bg-white p-6 rounded-xl shadow-sm col-span-4 lg:col-span-2">
        <h3 class="text-lg font-semibold mb-4">Alertas Principales</h3>
        <p class="text-sm text-gray-500 mb-6">
          Áreas que requieren atención inmediata
        </p>
        <div class="space-y-4">
          {
            result.map((area) =>
              area.data.demagoguery_level.score === maxDemagoguery ? (
                <div class="space-y-4">
                  <div class="p-4 rounded-lg border border-red-200 bg-red-50">
                    <div class="flex items-center gap-2 text-red-600 font-medium mb-2">
                      <AlertTriangle className="w-4 h-4" />
                      <span>{area.data.display_name}</span>
                    </div>
                    <p class="text-sm text-red-600">
                      {area.data.analysis.weaknesses[0]}
                    </p>
                  </div>
                </div>
              ) : null
            )
          }
        </div>
      </div>
    </div>

    <div id="details" class="tab-content hidden">
      <!-- Vista de Detalles -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {
          result.map((area) => (
            <div class="bg-white rounded-xl shadow-sm p-6">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold">{area.data.display_name}</h2>
                <span
                  class={`px-3 py-1 rounded-full text-sm ${
                    area.data.demagoguery_level.category === "Alto"
                      ? "bg-red-100 text-red-700"
                      : area.data.demagoguery_level.category === "Moderado"
                        ? "bg-yellow-100 text-yellow-700"
                        : "bg-green-100 text-green-700"
                  }`}
                >
                  {area.data.demagoguery_level.category}
                </span>
              </div>

              <div class="w-full h-2 bg-gray-100 rounded-full overflow-hidden mb-6">
                <div
                  class={`h-full ${
                    area.data.demagoguery_level.category === "Alto"
                      ? termo.Alto
                      : area.data.demagoguery_level.category === "Moderado"
                        ? termo.Moderado
                        : termo["Moderado-Bajo"]
                  }`}
                  style={`width: ${
                    area.data.demagoguery_level.category === "Alto"
                      ? "80%"
                      : area.data.demagoguery_level.category === "Moderado"
                        ? "60%"
                        : "40%"
                  }`}
                />
              </div>

              {area.data.analysis?.strengths &&
                area.data.analysis.strengths.length > 0 && (
                  <div class="mb-4">
                    <h3 class="text-green-600 font-medium mb-2">Fortalezas</h3>
                    <ul class="space-y-2">
                      {area.data.analysis.strengths.map((strength) => (
                        <li class="text-sm text-gray-600">• {strength}</li>
                      ))}
                    </ul>
                  </div>
                )}

              <div>
                <h3 class="text-red-600 font-medium mb-2">Debilidades</h3>
                <ul class="space-y-2">
                  {area.data.analysis.weaknesses.map((debilidad) => (
                    <li class="text-sm text-gray-600">• {debilidad}</li>
                  ))}
                </ul>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </main>
</Layout>
<style>
  .active-tab {
    background-color: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  .hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabs = document.querySelectorAll(".tab-btn");
    const contents = document.querySelectorAll(".tab-content");

    // Set initial state
    if (tabs.length > 0) {
      tabs[0].classList.add("active-tab");
    }

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        // Remove active class from all tabs
        tabs.forEach((t) => t.classList.remove("active-tab"));

        // Add active class to clicked tab
        tab.classList.add("active-tab");

        // Hide all content
        contents.forEach((content) => content.classList.add("hidden"));

        // Show selected content
        const targetId = (tab as HTMLElement).dataset.tab;
        if (targetId) {
          document?.getElementById(targetId)?.classList.remove("hidden");
        }
      });
    });
  });
</script>
